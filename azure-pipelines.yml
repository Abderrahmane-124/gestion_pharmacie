trigger:
  - main  # Configure the branches that should trigger a build

pool:
  vmImage: 'ubuntu-latest'  # Use the latest Ubuntu agent

variables:
  # Backend variables
  javaVersion: '17'
  backendDir: 'backend_spring'
  
  # Frontend variables
  nodeVersion: '18.x'
  frontendDir: 'Frontend_react'
  
  # Build configuration
  buildConfiguration: 'production'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Backend
    displayName: 'Build Backend'
    steps:
    - task: Maven@3
      displayName: 'Build Spring Boot Backend'
      inputs:
        mavenPomFile: '$(backendDir)/pom.xml'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.$(javaVersion)'
        mavenVersionOption: 'Default'
        goals: 'clean package'
        options: '-DskipTests'
    
    - task: CopyFiles@2
      displayName: 'Copy Backend Artifacts'
      inputs:
        SourceFolder: '$(backendDir)/target'
        Contents: '*.jar'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/backend'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Backend Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/backend'
        ArtifactName: 'backend'
        publishLocation: 'Container'

  - job: Frontend
    displayName: 'Build Frontend'
    steps:
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: $(nodeVersion)
    
    - script: |
        cd $(frontendDir)
        npm ci
      displayName: 'Install dependencies'
    
    - script: |
        cd $(frontendDir)
        npm run build
      displayName: 'Build React Frontend'
    
    - task: CopyFiles@2
      displayName: 'Copy Frontend Artifacts'
      inputs:
        SourceFolder: '$(frontendDir)/dist'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/frontend'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Frontend Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/frontend'
        ArtifactName: 'frontend'
        publishLocation: 'Container'

- stage: Test
  displayName: 'Test Stage'
  dependsOn: Build
  jobs:
  - job: BackendTests
    displayName: 'Backend Tests'
    steps:
    - task: Maven@3
      displayName: 'Run Backend Tests'
      inputs:
        mavenPomFile: '$(backendDir)/pom.xml'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.$(javaVersion)'
        mavenVersionOption: 'Default'
        goals: 'test'

  - job: FrontendTests
    displayName: 'Frontend Tests'
    steps:
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: $(nodeVersion)
    
    - script: |
        cd $(frontendDir)
        npm ci
      displayName: 'Install dependencies'
    
    - script: |
        cd $(frontendDir)
        npm run test
      displayName: 'Run Frontend Tests'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Test
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployApp
    displayName: 'Deploy Application'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              itemPattern: '**'
              downloadPath: '$(System.ArtifactsDirectory)'
          
          # Add your deployment steps here
          # Example for deploying to Azure App Service:
          # - task: AzureWebApp@1
          #   inputs:
          #     azureSubscription: 'Your-Azure-Subscription'
          #     appName: 'your-app-service-name'
          #     package: '$(System.ArtifactsDirectory)/backend/*.jar'
          #     appType: 'webAppLinux'
          #     runtimeStack: 'JAVA|17-java17'
          
          # Example for deploying frontend to Azure Static Web Apps:
          # - task: AzureStaticWebApp@0
          #   inputs:
          #     azure_static_web_apps_api_token: $(AZURE_STATIC_WEB_APPS_API_TOKEN)
          #     app_location: '$(System.ArtifactsDirectory)/frontend'
          #     output_location: '' 